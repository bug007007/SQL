1.sql如何进行优化？
a.尽量避免使用子查询 
  e.g.SELECT * FROM t1 WHERE id (SELECT id FROM t2 WHERE name = 'chackca');
  其子查询在Mysql5.5版本里，内部执行计划是这样：先查外表再匹配内表，而不是先查内表t2，当外表的数据很大时，查询速度会非常慢。
  由于MySQL的优化器对于子查询的处理能力比较弱，所以不建议使用子查询，可以改写成Inner Join，之所以 join 连接效率更高，是因为 MySQL不需要在内存中创建临时表。
  但请注意的是：优化只针对SELECT有效，对UPDATE/DELETE子查询无效，固生产环境应避免使用子查询。
  在MariaDB10/Mysql5.6版本里，采用join关联方式对其进行了优化，这条SQL语句会自动转换为：
  SELECT t1.* FROM t1 JOIN t2 on t1.id = t2.id
b.用IN来替换OR,对于连续的数值，能用 between 就不要用 in 了；再或者使用连接来替换。
  e.g. SELECT * FROM t WHERE id = 10 OR id = 20 OR id = 30; 
     replaced by SELECT * FROM t WHERE id IN (10,20,30);
c.读取适当的记录LIMIT M,N，而不要读多余的记录
  MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。
  优化的方法如下：可以取前一页的最大行数的id（将上次遍历到的最末尾的数据ID传给数据库，然后直接定位到该ID处，再往后面遍历数据），然后根据这个最大的id来限制下一页的起点。
  e.g.select id,name from t limit 866613, 20
     replaced by select id,name from table_name where id> 866612 limit 20
d.禁止不必要的Order By排序
e.总和查询可以禁止排重用union all
  union和union all的差异主要是前者需要将结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。
  当然，union all的前提条件是两个结果集没有重复数据。所以一般是我们明确知道不会出现重复数据的时候才建议使用 union all 提高速度。

2. xgb原理介绍一下？
