SELECT
USE sql_store;

SELECT 
	first_name, 
    last_name, 
    points, 
    points * 10 + 100 AS 'discount factor'
FROM customers;
-- WHERE customer_id = 1
-- ORDER BY first_name

SELECT DISTINCT state
FROM customers;

SELECT 
	name,
    unit_price,
    unit_price * 1.1 AS 'new price'
FROM products;

SELECT *
FROM Customers
WHERE birth_date > '1990-01-01' OR points > 1000;

SELECT * 
FROM order_items 
WHERE order_id = 6 AND unit_price * quantity > 30;

SELECT *
FROM products
WHERE quantity_in_stock IN (49, 38, 72);

SELECT *
FROM customers
WHERE points BETWEEN 1000 AND 3000;
-- equal to WHERE points >= 1000 AND points <= 3000

SELECT * 
FROM customers
WHERE birth_date BETWEEN '1990-01-01' AND '2000-01-01';

SELECT *
FROM customers
WHERE last_name LIKE 'b%' ;
-- '%b%' contain b anywhere '%b' end with b, '_y' two character and end with y, 'b__y' b + two character + y
-- % any number of characters
-- _ single character

SELECT *
FROM customers
WHERE address LIKE '%TRAIL%' OR address LIKE '%AVENUE%';

SELECT *
FROM customers
WHERE phone LIKE '%9';
-- NOT LIKE

-- WHERE last_name LIKE '%field%'  == WHERE last_name REGEXP 'field'
-- in REGEXP '^field' means start with field, 'field$' means end with field
-- multiple search 'field|mac|rose' contain field or mac or rose
-- '[gim]e' contain ge or ie or me '[a-h]e' contain a to h and follow by e 
-- ^ beginning
-- $ end
-- | logical or
-- [abcd]
-- [a-f]

SELECT *
FROM customers
-- WHERE first_name REGEXP 'ELKA|AMBUR'
-- WHERE last_name REGEXP 'ey$|on$'
-- WHERE last_name REGEXP '^MY|SE'
WHERE last_name REGEXP 'B[RU]';

SELECT *
FROM customers
WHERE phone IS NULL;
-- IS NOT NULL

SELECT * 
FROM customers
ORDER BY state DESC, first_name DESC;

SELECT *
FROM customers
LIMIT 6, 3 ;
-- escape first 6 and choose the next 3

JOIN
USE sql_store;

-- inner joint
SELECT order_id, o.customer_id, first_name, last_name
FROM customers c
JOIN orders o
	ON c.customer_id = o.customer_id;
    
SELECT order_id, oi.product_id, quantity, oi.unit_price
FROM order_items oi
JOIN products pr
	ON oi.product_id = pr.product_id;
    
-- Joining across database
SELECT *
FROM order_items oi
JOIN sql_inventory.products pr
	ON oi.product_id = pr.product_id;
    
-- self joins
USE sql_hr;

SELECT e.employee_id, e.first_name, m.first_name
FROM employees e
JOIN employees m
	ON e.reports_to = m.employee_id;
    
    
-- join multiple tables
USE sql_store;

SELECT o.order_date, c.first_name, os.name AS status
FROM orders o
JOIN customers c
	ON o.customer_id = c.customer_id
JOIN order_statuses os
	ON o.status = os.order_status_id;
    
USE sql_invoicing;

SELECT p.client_id, p.invoice_id, p.date, pm.name, p.amount, c.name
FROM payments p
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id
JOIN clients c
	ON p.client_id = c.client_id;

-- compound join conditions
USE sql_store;

SELECT *
FROM order_items oi
JOIN order_item_notes oin
	ON oi.order_id = oin.order_id AND oi.product_id = oin.product_id;

-- implicit join syntax (better not to use. can be crossed join when miss WHERE)
SELECT *
FROM order_items oi, order_item_notes oin
WHERE oi.order_id = oin.order_id AND oi.product_id = oin.product_id;

-- outer joins (left of right joint)
SELECT 
	c.customer_id,
    c.first_name,
    o.order_id
FROM orders o
right JOIN customers c 
	ON c.customer_id = o.customer_id
ORDER BY c.customer_id;
-- return all the right table(c.customer_id) results withouts connection between the left one(o.cusotmer_id)

SELECT 
	p.product_id, 
	p.name, 
    oi.quantity
FROM products p
	LEFT JOIN order_items oi
    ON p.product_id = oi.product_id
ORDER BY p.product_id;

-- outer joint between multiple tables
SELECT 
	c.customer_id,
    c.first_name,
    o.order_id,
    sh.name AS shipper
FROM customers c
LEFT JOIN orders o
	ON c.customer_id = o.customer_id
LEFT JOIN shippers sh
	ON o.shipper_id =  sh.shipper_id
ORDER BY c.customer_id;

SELECT 
	o.order_date,
    o.order_id,
    c.first_name AS customer,
    s.name AS shipper,
    os.name AS status
FROM orders o
LEFT JOIN customers c 
	ON o.customer_id = c.customer_id
LEFT JOIN shippers s
	ON o.shipper_id = s.shipper_id
LEFT JOIN order_statuses os
	ON o.status = os.order_status_id
ORDER BY os.name;

-- self outer joins
USE sql_hr;

SELECT 
	e.employee_id,
    e.first_name,
	m.first_name AS manager
FROM employees e
-- JOIN employees m (inner join, results exclude the manager self)
LEFT JOIN employees m 
-- (out join, results include all the people in the table)
	ON e.reports_to = m.employee_id;

-- the USING clause
USE sql_store;

SELECT o.order_id, c.first_name, sh.name AS shipper
FROM orders o
JOIN customers c 
	-- ON o.customer_id = c.customer_id 'simplified with USING command'
    USING (customer_id)
LEFT JOIN shippers sh
	USING (shipper_id);
    
SELECT *
FROM order_items oi
JOIN order_item_notes oin
	-- ON oi.order_id = oin.order_id AND oi.product_id = oin.product_id
    USING (order_id, product_id);

USE sql_invoicing;

SELECT p.date, c.name AS client, p.amount, pm.name
FROM payments p
JOIN clients c
	USING (client_id)
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id;
    
-- Natural joins (join by engine and can't chosee, discourage to use)
USE sql_store;

SELECT o.order_id, c.first_name
FROM orders o
NATURAL JOIN customers c ;

-- cross join
SELECT 
	c.first_name AS customer, 
    p.name AS product
FROM customers c
CROSS JOIN products p -- (explict syntax)
-- FROM customers c, products p (implict syntax)
ORDER BY c.first_name;

SELECT *
FROM shippers s
CROSS JOIN products p 
-- FROM shippers s, products p
ORDER BY s.name;

-- Unions
SELECT 
	order_id, 
    order_date, 
    'Active' AS status
FROM orders
WHERE order_date >= '2019-01-01'

UNION

SELECT 
	order_id, 
    order_date, 
    'Archive' AS status
FROM orders
WHERE order_date < '2019-01-01';

SELECT name
FROM shippers
UNION
SELECT first_name
FROM customers;

SELECT 
	c.customer_id, 
	c.first_name, 
    c.points,
    'Bronze' AS type
FROM customers c
WHERE c.points <= 2000

UNION

SELECT 
	c.customer_id, 
	c.first_name, 
    c.points,
    'Silver' AS type
FROM customers c
WHERE c.points > 2000 AND c.points <=3000

UNION

SELECT 
	customer_id, 
	first_name, 
    points,
    'Gold' AS type
FROM customers 
WHERE points > 3000 
ORDER BY first_name

COLUMN ATTRIBUTES
-- Column contributes
-- NN 'no none', 
-- VARCHAR 'variable character', VARCHAR(50), CHAR(50), the difference is CHAR(50) will use empty to fill up the following.
-- AI 'auto increment', the new added will follow the increment rule

-- Inserting a row
USE sql_store;

INSERT INTO customers
-- INSERT INTO customers(first_name, last_name, birth_date, address, city, state)
VALUES (DEFAULT, 
		'John',
        'Smith',
        '1990-01-01',
        NULL,
        'address',
        'city',
        'CA',
        DEFAULT
        );
-- VALUES ( 'John','Smith','1990-01-01',NULL,'address','city','CA',DEFAULT)

-- Insert multiple rows
INSERT INTO shippers(name)
VALUES ('shipper1'),
		('shipper2'),
        ('shipper3');

INSERT INTO products(name, quantity_in_stock, unit_price)
VALUES ('product1',1,3),
		('product2',2,4),
        ('product3',3,5);

-- Inserting Hierachical rows
INSERT INTO orders(customer_id, order_date, status)
VALUES(1, '2019-01-01', 1);

SELECT LAST_INSERT_ID();

INSERT INTO order_items
VALUES 
	(LAST_INSERT_ID(), 1, 1, 2.95),
    (LAST_INSERT_ID(), 2, 1, 3.95);

-- Creating a copy of a table	
CREATE TABLE order_archived AS 
SELECT * FROM orders;

-- right click table, and truncate table
INSERT INTO order_archived
SELECT *
FROM orders
WHERE order_date < '2019-01-01';

USE sql_invoicing;

CREATE TABLE invoices_archived AS 
SELECT i.invoice_id, c.name, i.invoice_total, i.due_date, i.payment_date
FROM invoices i
LEFT JOIN clients c
	ON i.client_id = c.client_id
WHERE payment_date IS NOT NULL;

-- Updating a single row

UPDATE invoices
SET payment_total = 0, payment_date = null
WHERE invoice_id = 1;

-- Updating multiple rows

UPDATE invoices
SET payment_total = invoice_total * 0.5, 
	payment_date = due_date
WHERE client_id IN (3, 4);

USE sql_store;

UPDATE customers
SET points = points + 50
WHERE birth_date < '1990-01-01';

-- using subqueries in updates

UPDATE invoices
SET payment_total = invoice_total * 0.5, 
	payment_date = due_date
WHERE client_id = 
				(SELECT client_id
                FROM clients
                WHERE state IN ('CA','NY'));
                
-- Delete rows
DELETE FROM invoices
WHERE invoice_id = (
	SELECT * 
	FROM clients
	WHERE name = 'Myworks'
);

-- resorting the databases
-- click 'file' in menu and open sql script, open the original file again and run

AGGREGATE FUNCTIONS
-- Agregate functions
USE sql_invoicing;

SELECT 
	MAX(invoice_total) AS highest,
    MIN(invoice_total) AS lowest,
    AVG(invoice_total) AS average,
    SUM(invoice_total) AS total,
    SUM(invoice_total * 1.1) AS totalmul,
    COUNT(invoice_total) AS number_of_invoice,
    COUNT(payment_date) AS number_of_payment,
    COUNT(*) AS total_records,
    COUNT(DISTINCT client_id) AS distinct_total_records
FROM invoices
WHERE invoice_date > '2019-07-01';

SELECT 
	'First half of 2019' AS date_range,
	SUM(invoice_total) AS total_sales,
    SUM(payment_total) AS total_payments,
    SUM(invoice_total - payment_total) AS what_we_expect
FROM invoices
WHERE invoice_date
	BETWEEN '2019-01-01' AND '2019-06-30'

UNION

SELECT 
	'Second half of 2019' AS date_range,
	SUM(invoice_total) AS total_sales,
    SUM(payment_total) AS total_payments,
    SUM(invoice_total - payment_total) AS what_we_expect
FROM invoices
WHERE invoice_date
	BETWEEN '2019-07-01' AND '2019-12-31'

UNION

SELECT 
	'Total' AS date_range,
	SUM(invoice_total) AS total_sales,
    SUM(payment_total) AS total_payments,
    SUM(invoice_total - payment_total) AS what_we_expect
FROM invoices;

--  The group by clause
SELECT 
	state,
    city,
	SUM(invoice_total) AS total_sales
FROM invoices
JOIN clients USING (client_id)
-- WHERE invoice_date >= '2019-07-01'
GROUP BY state, city
ORDER BY total_sales DESC;

SELECT 
	i.payment_date AS date,
    pm.name AS payment_method,
    SUM(i.payment_total) AS total_payment
FROM invoices i
JOIN payments p 
	USING (invoice_id)
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id
GROUP BY payment_date, name 
ORDER BY date;

-- The HAVING clause
SELECT 
	client_id,
    SUM(invoice_total) AS total_sales,
    COUNT(*) AS number_of_invoices
FROM invoices
GROUP BY client_id
HAVING total_sales > 500 AND number_of_invoices > 5;

-- WHERE and HAVING can use AND to combine different filter 
-- difference between WHERE and HAVING:
-- WHERE used before GROUP BY, HAVING used after GROUP BY
-- HAVING uses clause must be used in SELECT clause, WHERE uses clause exclude SELECT clause

USE sql_store;

SELECT 
    c.customer_id,
	c.first_name,
	c.last_name,
    c.state,
    SUM(oi.quantity * oi.unit_price) AS spend
FROM customers c
JOIN orders o 
	USING(customer_id)
JOIN order_items oi
	USING(order_id)
GROUP BY 
	c.customer_id,
	c.first_name,
	c.last_name
HAVING state = 'VA' and spend > 100;

-- The Rollup operator
USE sql_invoicing;

SELECT
	state,
    city,
    SUM(invoice_total) AS total_sales
FROM invoices i
JOIN clients c USING(client_id)
GROUP BY state, city WITH ROLLUP;

SELECT 
	pm.name AS payment_method,
    SUM(p.amount) AS total
FROM payments p
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id
GROUP BY pm.name WITH ROLLUP

WRITING COMPLEX QUERIES
-- subqueries

-- Fing products that are more expensive than Lettuce(id = 3)
USE sql_store;
SELECT *
FROM products
WHERE unit_price > (
	SELECT unit_price
    FROM products
	WHERE product_id = 3
);

USE sql_hr;
SELECT *
FROM employees
WHERE salary > (
		SELECT AVG(salary) 
		FROM employees
	);

-- The IN operator
-- Find the products that have never been ordered
USE sql_store;

SELECT *
FROM products
WHERE product_id NOT IN(
	SELECT DISTINCT product_id
    FROM order_items
);

-- Exercise: Find clients without invoices
USE sql_invoicing;

SELECT*
FROM clients
WHERE client_id NOT IN(
	SELECT DISTINCT client_id
	FROM invoices
);

-- Subqueries VS Joins
SELECT *
FROM clients
LEFT JOIN invoices USING(client_id)
WHERE invoice_id IS NULL;

-- Find customers who have ordered lettuce (id = 3)
-- Select customer_id, first_name, last_name
USE sql_store;

SELECT DISTINCT o.customer_id, c.first_name, c.last_name
FROM orders o
JOIN customers c USING(customer_id)
WHERE order_id IN(
	SELECT order_id
    FROM order_items
    WHERE product_id = 3
);

SELECT DISTINCT  o.customer_id, c.first_name, c.last_name
FROM orders o
JOIN customers c USING(customer_id)
JOIN order_items oi USING(order_id)
WHERE product_id = 3;

-- The ALL keywords
-- Select invoices larger than all invoices of client 3
USE sql_invoicing;

SELECT *
FROM invoices
WHERE invoice_total > (
	SELECT MAX(invoice_total)
    FROM invoices
    WHERE client_id = 3
);

SELECT *
FROM invoices
WHERE invoice_total > ALL(
	SELECT invoice_total
    FROM invoices
    WHERE client_id = 3
);
-- greater than all the number included = greater than the max

-- The ANY keyword
-- Select clients with at least two invoices
SELECT *
FROM clients
WHERE client_id IN(
	SELECT client_id
    FROM invoices
    GROUP BY client_id
    HAVING COUNT(*) >=2
);
-- same as
SELECT *
FROM clients
WHERE client_id = ANY (
	SELECT client_id
    FROM invoices
    GROUP BY client_id
    HAVING COUNT(*) >=2
);

-- Correlated subqueries
-- Select employees whose salary is above the average in their office
USE sql_hr;

SELECT *
FROM employees e
WHERE salary > (
	SELECT AVG(salary)
    FROM employees
    WHERE office_id = e.office_id
);

-- Get invoices that are larger than the client's average invoice amount
USE sql_invoicing;

SELECT *
FROM invoices i
WHERE invoice_total > (
	SELECT AVG(invoice_total)
    FROM invoices
    WHERE client_id = i.client_id
);

-- The Exists operator
-- select clients that have an invoice
SELECT *
FROM clients
WHERE client_id IN(
	SELECT DISTINCT client_id
    FROM invoices
);

SELECT *
FROM clients c
WHERE EXISTS (
	SELECT client_id
    FROM invoices
    WHERE client_id = c.client_id	
);

-- Find the products that have never been ordered
USE sql_store;

SELECT * 
FROM products p
WHERE NOT EXISTS(
	SELECT product_id
    FROM order_items 
    WHERE product_id = p.product_id
);

SELECT * 
FROM products p
WHERE p.product_id NOT IN(
	SELECT DISTINCT product_id
    FROM order_items 
);

-- Subqueries in the SELECT clause
USE sql_invoicing;
SELECT 
	invoice_id,
    invoice_total,
    (SELECT AVG(invoice_total) FROM invoices) AS invoice_average,
    invoice_total - (SELECT invoice_average) AS difference
FROM invoices;

SELECT  c.client_id,
		c.name,
        (SELECT SUM(invoice_total) FROM invoices i WHERE client_id = c.client_id) AS total_sales,
        (SELECT AVG(invoice_total) FROM invoices) AS invoice_average,
        (SELECT total_sales) - (SELECT invoice_average) AS difference
FROM clients c;
-- FROM invoices i
-- RIGHT JOIN clients c USING (client_id)
-- GROUP BY i.client_id, c.name

-- sub queries in FROM clause
SELECT *
FROM(
SELECT  c.client_id,
		c.name,
        (SELECT SUM(invoice_total) FROM invoices i WHERE client_id = c.client_id) AS total_sales,
        (SELECT AVG(invoice_total) FROM invoices) AS invoice_average,
        (SELECT total_sales) - (SELECT invoice_average) AS difference
FROM clients c
) AS sales_summary
WHERE total_sales IS NOT NULL

Numeric Functions
SELECT ROUND(5.37, 1) ;
-- Get the round number with 1 left behind dot
SELECT CEILING (5.2);
-- return the number greater than or equal to the number 
SELECT FLOOR (5.7);
-- return the number less than or equal to the number
SELECT ABS (5.7);
-- return the absolute value
SELECT RAND();
-- return a random value
-- the compelete numeric function search in google: mysql numeric functions

-- string functions
SELECT LENGTH('Sky');
SELECT LOWER('Sky');
SELECT UPPER('Sky');
SELECT LTRIM('    Sky');
-- clear the left blank
SELECT RTRIM('Sky   ');
-- clear the left blank
SELECT TRIM('   Sky blue  ');
-- clear all the blank
SELECT LEFT('KINDERGRADEN', 4);
SELECT RIGHT('KINDERGRADEN', 4);
SELECT SUBSTRING('KINDERGRADEN', 5, 6);
-- select a length of 6 substring from the 5 position 
SELECT LOCATE('N','KINDERGRADEN');
SELECT REPLACE('kindergarten','garten','garden');
SELECT CONCAT('first','last');

USE sql_store;

SELECT CONCAT(first_name, ' ', last_name) AS full_name
FROM customers;
-- the compelete string function search in google: mysql string functions

-- Date functions
SELECT NOW(), CURDATE(), CURTIME();
SELECT YEAR(NOW()), MONTH(NOW()), DAY(NOW()), DAYNAME(NOW());
SELECT EXTRACT(DAY FROM NOW());

USE  sql_store;

SELECT * 
FROM orders
WHERE YEAR(order_date) >= YEAR(NOW());

-- Formating dates and times
SELECT DATE_FORMAT(NOW(),'%M %D %Y');
SELECT DATE_FORMAT(NOW(),'%H:%i %p');
-- mysql date format string

-- Calculating dates and times
SELECT DATE_ADD(NOW(),INTERVAL 1 DAY);
SELECT DATE_SUB(NOW(),INTERVAL 1 DAY);
SELECT DATEDIFF('2019-01-05', '2019-01-01');
SELECT TIME_TO_SEC('9:00') - TIME_TO_SEC('9:02');

-- The IFNULL and COALESCE functions
USE sql_store;

SELECT 
	order_id,
    IFNULL(shipper_id, 'Not Assigned') AS shipper 
FROM orders;
-- return null value with signed string
SELECT 
	order_id,
    COALESCE(shipper_id, comments, 'Not Assigned') AS shipper 
FROM orders;
-- if null, first return the value in comments, if comments is NULL, then return signed string

SELECT 
	CONCAT(first_name, ' ', last_name) AS customer,
	COALESCE(phone, 'Unknown') AS phone
FROM customers;

-- The IF function
-- IF(expression, first, second) if satisfied the expression, then return first, otherwise return second

SELECT
	order_id,
    order_date,
    IF(YEAR(order_date) = YEAR(NOW()),'Actived', 'Archived') AS category
FROM orders;

USE sql_store;

SELECT oi.product_id,
	p.name,
	COUNT(oi.product_id) AS orders,
    IF(COUNT(oi.product_id) >= 2,'Many times','once') AS frequency
FROM order_items oi
JOIN products p USING(product_id)
GROUP BY product_id;

-- The CASE Operator
SELECT 
	order_id,
    CASE
		WHEN YEAR(order_date) = YEAR(NOW()) THEN 'Active'
        WHEN YEAR(order_date) = YEAR(NOW()) - 1 THEN 'Last year'
		WHEN YEAR(order_date) < YEAR(NOW()) - 1 THEN 'Archived'
        ELSE 'Future'
	END AS category
    FROM orders;
    
    SELECT 
		CONCAT(first_name, ' ', last_name) AS customer,
        points,
        CASE
			WHEN points > 3000 THEN 'Gold'
            WHEN 2000 < points THEN 'Silver'
            ELSE 'Bronze'
		END AS category
	FROM customers 
    ORDER BY points DESC
   
Creating views
USE sql_invoicing;

CREATE VIEW sales_by_client AS
SELECT
	c.client_id,
    c.name,
    SUM(invoice_total) AS total_sales
FROM clients c
JOIN invoices i USING (client_id)
GROUP BY client_id, name;

SELECT *
FROM sales_by_client
WHERE total_sales > 500;

CREATE VIEW clients_balance AS
SELECT
	i.client_id,
    c.name,
    i.invoice_total - i.payment_total AS balance
FROM invoices i
JOIN clients c USING(client_id)
GROUP BY i.client_id, c.name;

-- Altering or Droping view
CREATE OR REPLACE VIEW clients_balance AS
SELECT
	i.client_id,
    c.name,
    i.invoice_total - i.payment_total AS balance
FROM invoices i
JOIN clients c USING(client_id)
GROUP BY i.client_id, c.name;

-- Updatable views

CREATE OR REPLACE VIEW invoices_with_balance AS
SELECT 
	invoice_id,
    number,
    client_id,
    invoice_total,
    payment_total,
    invoice_total-payment_total AS balance,
    invoice_date,
    due_date,
    payment_date
FROM invoices
WHERE (invoice_total - payment_total) > 0;

UPDATE invoices_with_balance
SET due_date = DATE_ADD(due_date, INTERVAL 4 DAY)
WHERE invoice_id = 2;

-- The WITH CHECK OPTION Clause
CREATE OR REPLACE VIEW invoices_with_balance AS
SELECT 
	invoice_id,
    number,
    client_id,
    invoice_total,
    payment_total,
    invoice_total-payment_total AS balance,
    invoice_date,
    due_date,
    payment_date
FROM invoices
WHERE (invoice_total - payment_total) > 0
WITH CHECK OPTION;
-- prenvent row's disappear when update

UPDATE invoices_with_balance
SET payment_total = invoice_total
WHERE invoice_id = 2;
-- if the new action will disappear some rows, check option will prevent it and appear a error message

-- Other Benefits of View
-- simplify queries
-- reduce the impact of changes
-- restrict access to the data
